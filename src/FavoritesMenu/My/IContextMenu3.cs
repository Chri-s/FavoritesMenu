using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Text;
using Windows.Win32.Foundation;

namespace FavoritesMenu.My;

// Don't use the IContextMenu3 interface generated by CsWin32 because CsWin32 converts HandleMenuMsg2 (which originally returns HRESULT)
// to a void method and throws a COMException if result is != 0.
// But this method is called in WndProc and returns != 0 if it doesn't handle the window message. So we create and throw a COMException
// for many window messages, which is slow.
// That's why we use this interface, which returns the HRESULT and that can be checked without the overhead of exceptions.
[Guid("BCFCE0A0-EC17-11D0-8D10-00A0C90F2719"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown), ComImport()]
[SupportedOSPlatform("windows5.0")]
[System.CodeDom.Compiler.GeneratedCode("Microsoft.Windows.CsWin32", "0.3.49-beta+91f5c15987")]
internal interface IContextMenu3
            : Windows.Win32.UI.Shell.IContextMenu, IContextMenu2
{
    new void QueryContextMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU hmenu, uint indexMenu, uint idCmdFirst, uint idCmdLast, uint uFlags);

    unsafe new void InvokeCommand(Windows.Win32.UI.Shell.CMINVOKECOMMANDINFO* pici);

    unsafe new void GetCommandString(nuint idCmd, uint uType, [Optional] uint* pReserved, PSTR pszName, uint cchMax);

    void HandleMenuMsg(uint uMsg, WPARAM wParam, LPARAM lParam);

    /// <summary>Allows client objects of the IContextMenu3 interface to handle messages associated with owner-drawn menu items.</summary>
    /// <param name="uMsg">
    /// <para>Type: <b>UINT</b> The message to be processed. In the case of some messages, such as WM_INITMENUPOPUP, WM_DRAWITEM, WM_MENUCHAR, or WM_MEASUREITEM, the client object being called may provide owner-drawn menu items.</para>
    /// <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-icontextmenu3-handlemenumsg2#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <param name="wParam">
    /// <para>Type: <b>WPARAM</b> Additional message information. The value of this parameter depends on the value of the <i>uMsg</i> parameter.</para>
    /// <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-icontextmenu3-handlemenumsg2#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <param name="lParam">
    /// <para>Type: <b>LPARAM</b> Additional message information. The value of this parameter depends on the value of the <i>uMsg</i> parameter.</para>
    /// <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-icontextmenu3-handlemenumsg2#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <param name="plResult">
    /// <para>Type: <b>LRESULT*</b> The address of an <b>LRESULT</b> value that the owner of the menu will return from the message. This parameter can be <b>NULL</b>.</para>
    /// <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-icontextmenu3-handlemenumsg2#parameters">Read more on docs.microsoft.com</see>.</para>
    /// </param>
    /// <returns>
    /// <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    /// </returns>
    /// <remarks>
    /// <para><b>IContextMenu3::HandleMenuMsg2</b> generally replaces <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-icontextmenu2-handlemenumsg">IContextMenu2::HandleMenuMsg</a>, and is called when <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-icontextmenu">IContextMenu</a> determines that <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-icontextmenu3">IContextMenu3</a> is supported and one of the supported messages (see <i>uMsg</i>) has been received. However, in some cases, <b>IContextMenu2::HandleMenuMsg</b> is still called. Context menu hosts may dispatch menu messages through either or both methods. Consequently, if a Shell extension implements both <b>IContextMenu2::HandleMenuMsg</b> and <b>IContextMenu3::HandleMenuMsg2</b>, it must be prepared for menu messages to arrive through either method. <div class="alert"><b>Note</b>  If <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-icontextmenu3">IContextMenu3</a> is not implemented, there is no guarantee that <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-icontextmenu2">IContextMenu2</a> will be called in its place. In some cases, the absence of <b>IContextMenu3</b> is determined and then the process is halted.</div> <div> </div></para>
    /// <para><see href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-icontextmenu3-handlemenumsg2#">Read more on docs.microsoft.com</see>.</para>
    /// </remarks>
    [PreserveSig]
    HRESULT HandleMenuMsg2(int uMsg, nint wParam, nint lParam, out nint plResult);
}